diff --git a/.idea/copyright/profiles_settings.xml b/.idea/copyright/profiles_settings.xml
index e7bedf3..c7d1c5a 100755
--- a/.idea/copyright/profiles_settings.xml
+++ b/.idea/copyright/profiles_settings.xml
@@ -1,3 +1,3 @@
-<component name="CopyrightManager">
-  <settings default="" />
+<component name="CopyrightManager">
+  <settings default="" />
 </component>
\ No newline at end of file
diff --git a/build.xml b/build.xml
index 73bf853..73cb13e 100644
--- a/build.xml
+++ b/build.xml
@@ -93,27 +93,37 @@
 		</propertyfile>
 	</target>
 
+
+
+
 	<target name="history">
 		<trycatch>
 			<try> <antcall target="compile"/></try>
 			<catch><exec executable="git">
-			<arg value = "checkout"/>
-			<arg value="HEAD~"/>
-		    </exec>
+				<arg value = "reset --hard HEAD~1"/>
+			</exec>
 				<antcall target="history1"/>
 			</catch>
 		</trycatch>
+		<exec executable="git" output="output" >
+			<arg value = "diff"/>
+			<arg value = "--cached"/>
+		</exec>
 	</target>
 	<target name="history1">
 		<trycatch>
 			<try> <antcall target="compile"/></try>
 			<catch><exec executable="git">
-				<arg value = "checkout"/>
-				<arg value="head~1"/>
+				<arg value = "reset --hard HEAD~1"/>
 			</exec>
 				<antcall target="history"/>
 			</catch>
 		</trycatch>
+		<exec executable="git" output="output" >
+			<arg value = "diff"/>
+			<arg value = "--cached"/>
+		</exec>
 	</target>
 
+
 </project>
diff --git a/src/lab/Algorythm.java b/src/lab/Algorythm.java
index e0f8481..807afa6 100755
--- a/src/lab/Algorythm.java
+++ b/src/lab/Algorythm.java
@@ -1,151 +1,151 @@
-package lab;
-
-import java.util.Arrays;
-import static java.lang.Math.abs;
-
-/**
- * Created by Tom on 23.09.2017.
- D:\learning\вычмат\Lab1\data.csv
- */
-public class Algorythm {
-    private int n;
-    private double acc;
-    private double kfc [] [] ;
-    private double rez [] ;
-    private int m[];
-= 0
-
-    public  Algorythm( int n , double acc , double kfc [] [] , double rez []){
-        this.n = n;
-        this.acc = acc;
-        this.kfc = kfc;
-        this.rez = rez;
-    }
-    /** method checks if matrix has diagonal predominance **/
-    public boolean diagChk (double kfc [] []) {
-        double sum ;
-        int p = 0;
-        for (int i = 0 ; i < n ; i++){
-            sum = 0 ;
-            for (int j = 0 ; j < n ; j++ ){
-                if (j != i) sum = sum + abs(kfc[i][j]);
-                }
-            if (abs(kfc[i][i]) < sum ) {
-                return false;
-            }
-            if (abs(kfc[i][i]) == sum) p++;
-        }
-        if (p == n) return false;
-        else
-        return true;
-    }
-    /** define if matrix can have diagonal predominance **/
-    public boolean canBe () {
-        m = new int[n];
-        double sum;
-        int h = 0;
-        for (int i = 0 ; i < n ; i++){
-            for (int j = 0 ; j < n ; j++) {
-                sum = 0;
-                for (int k = 0 ; k < n ; k ++) {
-                    if (k != j) {
-                        sum = sum + kfc[i][k];
-                    }
-                }
-                if (kfc[i][j] >= sum) {
-                    h++;
-                    m[i] = j;
-                }
-            }
-        }
-        for (int i = 0 ; i < n ; i++){
-            for (int j = 0 ; j < n ; j++ ){
-                if (i != j){
-                    if(m[i] == m[j]){
-                        return false;
-                    }
-                }
-            }
-        }
-        if ( h != n ){
-            return false;
-        }
-        System.out.println("Matrix will be adducted to diagonal predominance");
-        return true;
-    }
-    /** change matrix to have diagonal predominance **/
-    public void makeDiag () {
-        double c;
-        double sum;
-        for(int i = 0 ; i < n ; i++) {
-           for (int j = 0 ; j < n ; j ++){
-               sum = 0;
-               for (int k = 0 ; k < n ; k ++) {
-                   if (k != j) {
-                       sum = sum + kfc[i][k];
-                   }
-               }
-               if (kfc[i][j] >= sum) {
-                   for (int str = 0 ; str < n ; str++){
-                       c = kfc[str][j];
-                       kfc[str][j] = kfc[str][i];
-                       kfc[str][i] = c;
-                   }
-               }
-           }
-        }
-    }
-
-    public void divRez () {
-        for (int i = 0 ; i < n ; i++){
-            rez[i] = rez[i]/kfc[i][i];
-        }
-    }
-    public void divKfc () {
-        double h = kfc [0][0];
-        for (int i = 0 ; i < n ; i++){
-            for (int j = 0 ; j < n ; j++){
-                if ( i == j){
-                    h = kfc[i][j];
-                    kfc[i][j] = 0;
-                }
-                kfc[i][j] = -kfc[i][j]/h;
-            }
-        }
-    }
-    /** check matrix convergence **/
-    public boolean chkShd () {
-        double sum;
-        for (int i = 0 ; i < n ; i++){
-            sum = 0;
-            for (int j = 0 ; j < n ; j++) {
-               sum = sum + abs(kfc[i][j]);
-            }
-            if (sum > 1) return false;
-        }
-        return true;
-    }
-    /** iterations **/
-    public void iter () {
-        double x0 [] = rez;
-        double xx [] = new double[n];
-        double sum;
-        double acc2;
-        int counter = 0;
-        System.out.println("X[0]:"+Arrays.toString(x0)+"      -");
-        do {
-            acc2 = x0[n-1];
-             for (int i = 0 ; i < n ; i++){
-                 sum = 0;
-                 for (int j = 0 ; j < n ; j++){
-                     sum = sum + kfc[i][j]*x0[j];
-                 }
-                 xx[i] = sum + rez[i];
-             }
-            x0 = Arrays.copyOf(xx ,n);
-            counter++;
-            System.out.printf("X[%d]:"+Arrays.toString(x0)+"     \u0394:%.10f%n" , counter , abs(acc2 - x0[n-1]));
-        }while (abs(acc2 - x0[n-1]) > acc );
-
-    }
-}
+package lab;
+
+import java.util.Arrays;
+import static java.lang.Math.abs;
+
+/**
+ * Created by Tom on 23.09.2017.
+ D:\learning\вычмат\Lab1\data.csv
+ */
+public class Algorythm {
+    private int n;
+    private double acc;
+    private double kfc [] [] ;
+    private double rez [] ;
+    private int m[];
+=0
+
+    public  Algorythm( int n , double acc , double kfc [] [] , double rez []){
+        this.n = n;
+        this.acc = acc;
+        this.kfc = kfc;
+        this.rez = rez;
+    }
+    /** method checks if matrix has diagonal predominance **/
+    public boolean diagChk (double kfc [] []) {
+        double sum ;
+        int p = 0;
+        for (int i = 0 ; i < n ; i++){
+            sum = 0 ;
+            for (int j = 0 ; j < n ; j++ ){
+                if (j != i) sum = sum + abs(kfc[i][j]);
+                }
+            if (abs(kfc[i][i]) < sum ) {
+                return false;
+            }
+            if (abs(kfc[i][i]) == sum) p++;
+        }
+        if (p == n) return false;
+        else
+        return true;
+    }
+    /** define if matrix can have diagonal predominance **/
+    public boolean canBe () {
+        m = new int[n];
+        double sum;
+        int h = 0;
+        for (int i = 0 ; i < n ; i++){
+            for (int j = 0 ; j < n ; j++) {
+                sum = 0;
+                for (int k = 0 ; k < n ; k ++) {
+                    if (k != j) {
+                        sum = sum + kfc[i][k];
+                    }
+                }
+                if (kfc[i][j] >= sum) {
+                    h++;
+                    m[i] = j;
+                }
+            }
+        }
+        for (int i = 0 ; i < n ; i++){
+            for (int j = 0 ; j < n ; j++ ){
+                if (i != j){
+                    if(m[i] == m[j]){
+                        return false;
+                    }
+                }
+            }
+        }
+        if ( h != n ){
+            return false;
+        }
+        System.out.println("Matrix will be adducted to diagonal predominance");
+        return true;
+    }
+    /** change matrix to have diagonal predominance **/
+    public void makeDiag () {
+        double c;
+        double sum;
+        for(int i = 0 ; i < n ; i++) {
+           for (int j = 0 ; j < n ; j ++){
+               sum = 0;
+               for (int k = 0 ; k < n ; k ++) {
+                   if (k != j) {
+                       sum = sum + kfc[i][k];
+                   }
+               }
+               if (kfc[i][j] >= sum) {
+                   for (int str = 0 ; str < n ; str++){
+                       c = kfc[str][j];
+                       kfc[str][j] = kfc[str][i];
+                       kfc[str][i] = c;
+                   }
+               }
+           }
+        }
+    }
+
+    public void divRez () {
+        for (int i = 0 ; i < n ; i++){
+            rez[i] = rez[i]/kfc[i][i];
+        }
+    }
+    public void divKfc () {
+        double h = kfc [0][0];
+        for (int i = 0 ; i < n ; i++){
+            for (int j = 0 ; j < n ; j++){
+                if ( i == j){
+                    h = kfc[i][j];
+                    kfc[i][j] = 0;
+                }
+                kfc[i][j] = -kfc[i][j]/h;
+            }
+        }
+    }
+    /** check matrix convergence **/
+    public boolean chkShd () {
+        double sum;
+        for (int i = 0 ; i < n ; i++){
+            sum = 0;
+            for (int j = 0 ; j < n ; j++) {
+               sum = sum + abs(kfc[i][j]);
+            }
+            if (sum > 1) return false;
+        }
+        return true;
+    }
+    /** iterations **/
+    public void iter () {
+        double x0 [] = rez;
+        double xx [] = new double[n];
+        double sum;
+        double acc2;
+        int counter = 0;
+        System.out.println("X[0]:"+Arrays.toString(x0)+"      -");
+        do {
+            acc2 = x0[n-1];
+             for (int i = 0 ; i < n ; i++){
+                 sum = 0;
+                 for (int j = 0 ; j < n ; j++){
+                     sum = sum + kfc[i][j]*x0[j];
+                 }
+                 xx[i] = sum + rez[i];
+             }
+            x0 = Arrays.copyOf(xx ,n);
+            counter++;
+            System.out.printf("X[%d]:"+Arrays.toString(x0)+"     \u0394:%.10f%n" , counter , abs(acc2 - x0[n-1]));
+        }while (abs(acc2 - x0[n-1]) > acc );
+
+    }
+}
diff --git a/src/lab/ConsoleRead.java b/src/lab/ConsoleRead.java
index 9c12f25..22ba056 100755
--- a/src/lab/ConsoleRead.java
+++ b/src/lab/ConsoleRead.java
@@ -1,145 +1,145 @@
-package lab;
-
-import java.io.File;
-import java.util.Random;
-import java.util.Scanner;
-
-/**
- * Created by Tom on 22.09.2017.
- */
-public class ConsoleRead{
-    private int n;
-    private double acc;
-    private double kfc [] [] ;
-    private double rez [];
-    private Scanner readMx = new Scanner(System.in);
-    private String path1 ;
-    private double data [];
-    private int type;
-
-    public ConsoleRead(int type) {
-        this.type = type;
-    }
-
-    public void readRez () {
-        Scanner tt = new Scanner(System.in);
-        for (int i = 0 ; i < n ; i++){
-            System.out.println("Enter the result for line " + (i+1));
-            try {
-                rez[i] = tt.nextDouble();
-            }catch (Exception e){
-                System.out.println("Wrong input");
-                e.printStackTrace();
-            }
-        }
-    }
-
-    /** method randomize matrix coefficients **/
-    public boolean randomizer () {
-        Scanner sc = new Scanner(System.in);
-        Random rnd = new Random();
-        System.out.println("Do you want to randomize the coefficients?(yes/no)");
-        String s1 = sc.next();
-        if (s1.toLowerCase().equals("yes") || s1.toLowerCase().equals("y")){
-            for (int i = 0 ; i < n ; i++) {
-                for (int j = 0 ; j < n ; j++) {
-                    kfc[i][j] = rnd.nextDouble();
-                }
-            }
-
-            return false;
-        } else {
-
-            return true;
-        }
-    }
-    /** method reads square matrix size by console **/
-    public void readSZ (){
-        try {
-            System.out.println("Enter matrix size:");
-            n = readMx.nextInt();
-        }catch (Exception e){
-            System.err.println("Wrong input");
-            System.exit(0);
-        }
-        kfc = new double [n] [n] ;
-        rez = new double[n];
-        }
-    /** method reads accuracy for result by console **/
-    public void readAcc () {
-        try {
-            System.out.println("Enter accuracy for result with delimiter  \",\" :");
-            acc = readMx.nextDouble();
-        }catch (Exception e){
-            System.err.println("Wrong input");
-            System.exit(0);
-        }
-    }
-    /** method reads matrix coefficients by console **/
-    public void readMassive() {
-        for (int i =0 ; i < n ; i++){
-            System.out.println("Enter the coefficients for line:" + (i+1) +"\n");
-            for (int j = 0 ; j <= n ; j++){
-                    try{
-                        if(j == n){
-                            System.out.println("Enter the result of line "+(i+1)+"\n");
-                            rez[i] = readMx.nextDouble();
-                        }else{
-                            System.out.println("Enter the "+ (j+1) +" coefficient\n");
-                            kfc[i][j] = readMx.nextDouble();
-                        }
-                    }catch (Exception e){
-                        System.err.println("Wrong input");
-                        System.exit(0);
-                    }
-            }
-        }
-    }
-    /** method reads data from csv file **/
-    public void getData () {
-        try {
-            Scanner sc = new Scanner(new File(path1));
-            n = sc.nextInt();
-            acc = sc.nextDouble();
-            data = new double[(n*n)+n];
-            kfc = new double[n][n];
-            rez = new double[n];
-            int k = 0;
-            while (sc.hasNext()){
-                data[k++] = sc.nextDouble();
-            }
-            k = 0;
-            for (int i = 0 ; i < n ; i++){
-                for (int j = 0 ; j <= n ; j++){
-                    if (j == n) rez[i] = data[k++];
-                    else
-                        kfc[i][j] = data [k++];
-                }
-            }
-        }catch (Exception e ){
-            System.err.println("Wrong input plz check file");
-            System.exit(-1);
-        }
-    }
-    public int getN() {
-        return n;
-    }
-    public double getAcc() {
-        return acc;
-    }
-    public double[][] getKfc() {
-        return kfc;
-    }
-
-    public double[] getRez() {
-        return rez;
-    }
-
-    public int getType() {
-        return type;
-    }
-
-    public void setPath1(String path1) {
-        this.path1 = path1;
-    }
-}
+package lab;
+
+import java.io.File;
+import java.util.Random;
+import java.util.Scanner;
+
+/**
+ * Created by Tom on 22.09.2017.
+ */
+public class ConsoleRead{
+    private int n;
+    private double acc;
+    private double kfc [] [] ;
+    private double rez [];
+    private Scanner readMx = new Scanner(System.in);
+    private String path1 ;
+    private double data [];
+    private int type;
+
+    public ConsoleRead(int type) {
+        this.type = type;
+    }
+
+    public void readRez () {
+        Scanner tt = new Scanner(System.in);
+        for (int i = 0 ; i < n ; i++){
+            System.out.println("Enter the result for line " + (i+1));
+            try {
+                rez[i] = tt.nextDouble();
+            }catch (Exception e){
+                System.out.println("Wrong input");
+                e.printStackTrace();
+            }
+        }
+    }
+
+    /** method randomize matrix coefficients **/
+    public boolean randomizer () {
+        Scanner sc = new Scanner(System.in);
+        Random rnd = new Random();
+        System.out.println("Do you want to randomize the coefficients?(yes/no)");
+        String s1 = sc.next();
+        if (s1.toLowerCase().equals("yes") || s1.toLowerCase().equals("y")){
+            for (int i = 0 ; i < n ; i++) {
+                for (int j = 0 ; j < n ; j++) {
+                    kfc[i][j] = rnd.nextDouble();
+                }
+            }
+
+            return false;
+        } else {
+
+            return true;
+        }
+    }
+    /** method reads square matrix size by console **/
+    public void readSZ (){
+        try {
+            System.out.println("Enter matrix size:");
+            n = readMx.nextInt();
+        }catch (Exception e){
+            System.err.println("Wrong input");
+            System.exit(0);
+        }
+        kfc = new double [n] [n] ;
+        rez = new double[n];
+        }
+    /** method reads accuracy for result by console **/
+    public void readAcc () {
+        try {
+            System.out.println("Enter accuracy for result with delimiter  \",\" :");
+            acc = readMx.nextDouble();
+        }catch (Exception e){
+            System.err.println("Wrong input");
+            System.exit(0);
+        }
+    }
+    /** method reads matrix coefficients by console **/
+    public void readMassive() {
+        for (int i =0 ; i < n ; i++){
+            System.out.println("Enter the coefficients for line:" + (i+1) +"\n");
+            for (int j = 0 ; j <= n ; j++){
+                    try{
+                        if(j == n){
+                            System.out.println("Enter the result of line "+(i+1)+"\n");
+                            rez[i] = readMx.nextDouble();
+                        }else{
+                            System.out.println("Enter the "+ (j+1) +" coefficient\n");
+                            kfc[i][j] = readMx.nextDouble();
+                        }
+                    }catch (Exception e){
+                        System.err.println("Wrong input");
+                        System.exit(0);
+                    }
+            }
+        }
+    }
+    /** method reads data from csv file **/
+    public void getData () {
+        try {
+            Scanner sc = new Scanner(new File(path1));
+            n = sc.nextInt();
+            acc = sc.nextDouble();
+            data = new double[(n*n)+n];
+            kfc = new double[n][n];
+            rez = new double[n];
+            int k = 0;
+            while (sc.hasNext()){
+                data[k++] = sc.nextDouble();
+            }
+            k = 0;
+            for (int i = 0 ; i < n ; i++){
+                for (int j = 0 ; j <= n ; j++){
+                    if (j == n) rez[i] = data[k++];
+                    else
+                        kfc[i][j] = data [k++];
+                }
+            }
+        }catch (Exception e ){
+            System.err.println("Wrong input plz check file");
+            System.exit(-1);
+        }
+    }
+    public int getN() {
+        return n;
+    }
+    public double getAcc() {
+        return acc;
+    }
+    public double[][] getKfc() {
+        return kfc;
+    }
+
+    public double[] getRez() {
+        return rez;
+    }
+
+    public int getType() {
+        return type;
+    }
+
+    public void setPath1(String path1) {
+        this.path1 = path1;
+    }
+}
diff --git a/src/lab/Prit.java b/src/lab/Prit.java
index b32e290..10a2223 100755
--- a/src/lab/Prit.java
+++ b/src/lab/Prit.java
@@ -1,82 +1,82 @@
-package lab;
-
-import java.util.Scanner;
-
-/**
- * Created by Tom on 22.09.2017.
- */
-public class Prit {
-    static Scanner readType ;
-    static ConsoleRead type;
-    public static void main(String[] args) {
-        System.out.println("Fixed-point iteration Lab1");
-
-        while(true) {
-            type = defineReadTp();
-            if(type != null)break;
-        }
-        if ( type.getType() == 1 ){
-            type.readSZ();
-            type.readAcc();
-            if (type.randomizer())
-            type.readMassive();
-            else type.readRez();
-        } else {
-            if (type.getType() == 2){
-                type.setPath1(readType.next());
-                type.getData();
-            }
-        }
-
-        Algorythm alg = new Algorythm(type.getN() , type.getAcc() , type.getKfc() , type.getRez());
-        if (alg.diagChk(type.getKfc())){
-            alg.divRez();
-            alg.divKfc();
-            if(alg.chkShd()) alg.iter();
-            else {
-                System.out.println("System does not converge");
-                System.exit(-1);
-            }
-        } else {
-            if(alg.canBe())
-                alg.makeDiag();
-            else System.out.println("System can't have diagonal predominance");
-            alg.divRez();
-            alg.divKfc();
-            if(alg.chkShd()) alg.iter();
-            else {
-                System.out.println("System does not converge");
-                System.exit(-1);
-            }
-        }
-
-
-        }
-        /** method define type of input chosen by user **/
-        public static ConsoleRead defineReadTp (){
-            System.out.println("Choose how to load input data . 1 - console , 2 - file ");
-            int rT;
-            try {
-                readType = new Scanner(System.in);
-                rT = readType.nextInt();
-            if ( rT == 1 ) {
-                ConsoleRead R = new ConsoleRead(1);
-                System.out.println("You chose console input");
-                return R;
-            }else {
-                if  ( rT == 2 ) {
-                    ConsoleRead R = new ConsoleRead(2);
-                    System.out.println("You chose file input");
-                    return R;
-                } else {
-                    System.err.println("Wrong input please choose 1 or 2");
-                    return null;
-                }}
-            }catch (Exception e){
-                System.err.println("Please choose a number");
-                return null;
-            }
-        }
-
-}
-
+package lab;
+
+import java.util.Scanner;
+
+/**
+ * Created by Tom on 22.09.2017.
+ */
+public class Prit {
+    static Scanner readType ;
+    static ConsoleRead type;
+    public static void main(String[] args) {
+        System.out.println("Fixed-point iteration Lab1");
+
+        while(true) {
+            type = defineReadTp();
+            if(type != null)break;
+        }
+        if ( type.getType() == 1 ){
+            type.readSZ();
+            type.readAcc();
+            if (type.randomizer())
+            type.readMassive();
+            else type.readRez();
+        } else {
+            if (type.getType() == 2){
+                type.setPath1(readType.next());
+                type.getData();
+            }
+        }
+
+        Algorythm alg = new Algorythm(type.getN() , type.getAcc() , type.getKfc() , type.getRez());
+        if (alg.diagChk(type.getKfc())){
+            alg.divRez();
+            alg.divKfc();
+            if(alg.chkShd()) alg.iter();
+            else {
+                System.out.println("System does not converge");
+                System.exit(-1);
+            }
+        } else {
+            if(alg.canBe())
+                alg.makeDiag();
+            else System.out.println("System can't have diagonal predominance");
+            alg.divRez();
+            alg.divKfc();
+            if(alg.chkShd()) alg.iter();
+            else {
+                System.out.println("System does not converge");
+                System.exit(-1);
+            }
+        }
+
+
+        }
+        /** method define type of input chosen by user **/
+        public static ConsoleRead defineReadTp (){
+            System.out.println("Choose how to load input data . 1 - console , 2 - file ");
+            int rT;
+            try {
+                readType = new Scanner(System.in);
+                rT = readType.nextInt();
+            if ( rT == 1 ) {
+                ConsoleRead R = new ConsoleRead(1);
+                System.out.println("You chose console input");
+                return R;
+            }else {
+                if  ( rT == 2 ) {
+                    ConsoleRead R = new ConsoleRead(2);
+                    System.out.println("You chose file input");
+                    return R;
+                } else {
+                    System.err.println("Wrong input please choose 1 or 2");
+                    return null;
+                }}
+            }catch (Exception e){
+                System.err.println("Please choose a number");
+                return null;
+            }
+        }
+
+}
+
